train.csv

row_id：（int64）行的ID代码。

timestamp：（int64）从该用户交互到该用户第一次事件完成之间的时间（以毫秒为单位）。

user_id：（int32）用户的ID代码。

content_id：（int16）用户交互的ID代码 问题id

content_type_id：（int8）如果事件是向用户提出的问题，则为0；如果事件是用户正在观看讲座，则为1。

task_container_id：（int16）这批问题或讲座的ID代码。例如，用户可能会先看到三个问题，然后再查看其中任何一个的解释。这三个都将共享一个task_container_id。

user_answer：（int8）用户对问题的答案（如果有）。将-1读为null，以进行讲座。

answered_correctly：（int8）用户是否正确响应。将-1读为null，以进行讲座。可当label

priority_question_elapsed_time：（float32）用户回答上一个问题束中的每个问题所花费的平均时间（以毫秒为单位），而忽略了其间的任何讲座。用户的第一个问题包或讲座的null。请注意，时间是用户解决上一个捆绑软件中每个问题所花费的平均时间。

before_question_had_explanation：（布尔）用户在回答上一个问题包之后是否忽略了两者之间的任何演讲，是否看到了说明和正确的回答。该值在单个问题包中共享，对于用户的第一个问题包或讲座，该值为null。通常，用户看到的前几个问题是入职诊断测试的一部分，他们没有得到任何反馈。






questions.csv：向用户提出的问题的元数据。

question_id：当内容类型为问题（0）时，train / test content_id列的外键。

bundle_id：一起解决问题的代码。类别变量

correct_answer：问题的答案。可以与火车user_answer列进行比较，以检查用户是否正确。

part：TOEIC测试的相关部分。问题属于哪个组

tags：问题的一个或多个详细标签代码。不会提供标签的含义，但是这些代码足以将问题聚在一起。





tutorials.csv：用户在学习过程中观看的讲座的元数据。 文献

lecture_id：当内容类型为演讲者（1）时，火车/测试content_id列的外键。

part：讲座的顶级类别代码。

tag：一个用于演讲的标签代码。不会提供标签的含义，但是这些代码足以将讲座聚在一起。

type_of：简要介绍讲座的核心目的 解决问题类型

example_test_rows.csv时间序列API会传递测试集数据的三个样本组。格式与train.csv大致相同。有两个不同的列可以反映AI辅导员在任何给定时间实际可获得的信息，但是出于API性能的考虑，将用户交互分组在一起，而不是一次严格显示单个用户的信息。一些用户将出现在火车集中未显示的隐藏测试集中，从而模拟了快速适应为网站的新到达者建模的挑战。

previous_group_responses（字符串）以该组第一行中列表的字符串表示形式提供前一个组的所有user_answer条目。每个组中的所有其他行均为空。如果您使用的是Python，则可能需要在非空行上调用eval。有些行可能为空，也可能为空列表。

previous_group_answers_correct（字符串）为上一组提供所有Answer_correctly字段，格式和警告与先前的group_responses相同。有些行可能为空，也可能为空列表。








时间序列API详细信息
请参阅入门笔记本，以获取有关如何完成提交的示例。时间序列API与以前的竞赛相比有所变化！

您不应该尝试为包含讲座的行提交任何内容。

该API按发生的顺序提供了用户交互组。每个组将包含来自许多不同用户的交互，但是来自任何单个用户的问题的总数不得超过task_container_id。每个组有1到1000个用户。

预计在隐藏的测试集中将看到大约250万个问题。

初始化后，API将在内存中最多加载1 GB的测试集数据。初始化步骤（env.iter_test（））实际需要更多的内存；我们建议您在调用之后才加载模型。该API还将花费大约15分钟的运行时间来加载和提供数据。

API使用上面指定的类型加载数据（对于user_id，int32；对于content_type_id，int8，等等）。



















